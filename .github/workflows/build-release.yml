name: Build und Release (manuell)

on:
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Art der Versionserhoehung'
        required: true
        default: 'patch'
        type: 'choice'
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Zusaetzliche Release Notes (optional)'
        required: false
        default: ''

jobs:
  versioning:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.set_version.outputs.new_version }}
      new_tag: ${{ steps.set_version.outputs.new_tag }}
      changelog: ${{ steps.generate_changelog.outputs.changelog }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "Letzter Tag: ${LATEST_TAG}"

      - name: Calculate new version
        id: set_version
        run: |
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          # Entferne 'v' Prefix falls vorhanden
          CURRENT_VERSION=${LATEST_TAG#v}
          
          # Parse Version (Major.Minor.Patch)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment basierend auf Input
          case "${{ github.event.inputs.version_increment }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          NEW_TAG="v${NEW_VERSION}"
          
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT
          
          echo "Neue Version: ${NEW_VERSION}"
          echo "Neuer Tag: ${NEW_TAG}"

      - name: Generate Changelog
        id: generate_changelog
        run: |
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          
          # Generiere Changelog seit letztem Tag
          if [ "$LATEST_TAG" != "v0.0.0" ]; then
            echo "Generiere Changelog seit ${LATEST_TAG}..."
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Erster Release - generiere Changelog seit Beginn..."
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Escape für GitHub Output
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "changelog=${CHANGELOG}" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "${{ steps.set_version.outputs.new_tag }}" -m "Release ${{ steps.set_version.outputs.new_version }}"
          git push origin "${{ steps.set_version.outputs.new_tag }}"

  package-and-release:
    needs: versioning
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repository (nach Tag)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.versioning.outputs.new_tag }}

      - name: Prepare artifacts (ZIPs ohne Build)
        run: |
          mkdir -p artifacts
          
          # Windows-Version (ohne .sh Dateien)
          zip -r "artifacts/KommunalGPT-windows-${{ needs.versioning.outputs.new_version }}.zip" . \
            -x "*.sh" ".git/*" ".github/*" "artifacts/*" "*.md" "LICENSE"
          
          # Linux-Version (ohne .bat/.ps1 Dateien)
          zip -r "artifacts/KommunalGPT-linux-${{ needs.versioning.outputs.new_version }}.zip" . \
            -x "*.bat" "*.ps1" "UpdateEnv.ps1" ".git/*" ".github/*" "artifacts/*" "*.md" "LICENSE"
          
          echo "Erstellte Artefakte:"
          ls -la artifacts/

      - name: Prepare Release Body
        id: release_body
        run: |
          RELEASE_BODY="## KommunalGPT v${{ needs.versioning.outputs.new_version }}
          
          ### Änderungen seit dem letzten Release:
          ${{ needs.versioning.outputs.changelog }}
          
          ### Downloads:
          - **Windows**: \`KommunalGPT-windows-${{ needs.versioning.outputs.new_version }}.zip\`
          - **Linux**: \`KommunalGPT-linux-${{ needs.versioning.outputs.new_version }}.zip\`
          
          ### Installation:
          ZIP-Datei herunterladen und gemäß README.md installieren
          
          ${{ github.event.inputs.release_notes }}"
          
          # Escape für GitHub Output
          RELEASE_BODY="${RELEASE_BODY//'%'/'%25'}"
          RELEASE_BODY="${RELEASE_BODY//$'\n'/'%0A'}"
          RELEASE_BODY="${RELEASE_BODY//$'\r'/'%0D'}"
          
          echo "release_body=${RELEASE_BODY}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.versioning.outputs.new_tag }}
          name: KommunalGPT v${{ needs.versioning.outputs.new_version }}
          body: ${{ steps.release_body.outputs.release_body }}
          draft: false
          prerelease: false
          files: |
            artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}